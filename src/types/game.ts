import { Task } from './task';

export type ResourceType = 'food' | 'coal' | 'iron' | 'gold' | 'wood';

export interface Building {
  type: string; // e.g., 'factory', 'barracks', 'market'
  level: number;
}

export interface Province {
  id: string; // Unique identifier, often corresponds to SVG element ID
  name: string;
  ownerTag: string; // Nation tag of the owner (e.g., 'FRA', 'GBR')
  path: string; // SVG path data (can be populated later)
  population: number;
  goldIncome: number; // Base gold income generated by the province
  industry: number; // Industrial output/level
  buildings: Building[];
  resourceType: ResourceType; // Type of resource produced
  army: number; // Number of troops stationed
}

export interface Nation {
  nationTag: string; // e.g., 'FRA', 'GBR', 'PRU'
  name: string;
  color: string; // Map color
  hexColor: string; // Hex version of the color
  // provinces: Province[]; // REMOVED - Provinces are now top-level in Game
  borderProvinces: string[] | null; // IDs of neighboring provinces (can be null if not calculated)
  
  // Nation-level resources & stats
  gold: number; // Treasury
  researchPoints: number;
  currentResearchId: string | null;
  currentResearchProgress: number; // Percentage or points
  
  // AI/Player specific
  buildQueue: BuildingQueueItem[] | null; // Null for AI? Or specific AI logic object?
  isAI: boolean;
}

export interface BuildingQueueItem {
  provinceId: string;
  buildingType: string;
  startTime: string; // ISO date string
  duration: number; // e.g., in game ticks or days
}

export interface Game {
  id: string; // Unique game identifier
  gameName: string;
  date: string; // Current game date (e.g., 'YYYY-MM-DD')
  mapName: string; // Identifier for the map SVG file
  playerNationTag: string; // Tag of the nation controlled by the player
  nations: Nation[]; // Array of all nations in the game (without nested provinces)
  provinces: Province[]; // Flat array of all provinces in the world
  // tasks?: Task[]; // Optional: List of tasks relevant to this game
}

export interface GameSave {
  id: string; // Usually matches game.id
  name: string; // Save game name
  lastSaved: string; // ISO date string
  game: Game;
  scenarioId: string;
} 